#!/bin/sh

## Author: Hamish King and Davide Vespasiani
## email: king.h@wehi.edu.au and vespasiani.d@wehi.edu.au
## Description: Script to align and process genomic sequencing paired-end data (fastq files)
## This script will:
## 1) align PE reads to the specified chimera genome 
## 2) retain only the uniquely mappable reads
## 3) remove duplicate reads
## 4) create fragment files (bed and bam format) for each read pair; 
## 5) calculate the number of deduplicated reads uniquely mapping to each of the 2 original genomes (spike-in genome and genome of interest)
## 6) use the number of reads mapping to the spike-in genome to calculate the scaling factor 
## 7) normalise the library size for the fragments mapping to the genome of interest with the scaling factor
## 8) calculate the genome coverage for each fragment mapping to the genome of interest

##  Define the help function-------------------------------------------------------------------------------------------------------------------------------
helpFunction()
{
    echo
    echo "Run this script as:  "$(basename $0)" -o <outDir> -d <dataDir> -g <chimeraGenomeDir>  -h <helpFunction> "
    echo " -o = full path to the out directory where all final files and subdirectories will be saved"
    echo " -d = full path to the data directory containing your fastq files. Fastq files should be gz compressed and should end with <sample-name>_R1.fastq.gz and <sample-name>_R2.fastq.gz"
    echo " -s = sample name of the fastq files. This should correspond to the <sample-name> preceeding _R1.fastq.gz and _R2.fastq.gz. eg: if the fastq files are labelled as <your-sample>_R1.fastq.gz and <your-sample>_R2.fastq.gz, then -s your-sample."
    echo " -g = full path to the directory containing all files (ie, bowtie2 index, chromosome.sizes.txt) for the chimera genome previously generated by the create-chimera-genome.sh script. NB: file naming for the chimera genome should be <spikeGenome-genomeOfInterest>, eg ecoliASM584v2-hg38"
    echo " -h = to print this help function"
    echo
    exit 1 # Exit script after printing help
}

# Get the command line arguments
while getopts ":ho:d:s:g:" flag; do
    case "${flag}" in
        h) helpFunction ;;
        o) outDir="${OPTARG}" ;; 
        d) dataDir="${OPTARG}" ;; 
        s) sample="${OPTARG}" ;;
        g) chimeraGenomeDir="${OPTARG}" ;;
        \?) echo "Invalid option: ${OPTARG}" >&2; exit 1 ;;
    esac
done

## check if any of outdir/datadir or chimera genome dir ends with / and if so remove the forward slash

if [[ -z "$outDir" ]]; then
    echo
    echo "outDir not specified"
    echo "Exiting the script";
    echo
    exit 1

 elif [[ "$outDir" == */ ]]; then
      outDir="${outDir%/}"
fi 

if [[ -z "$dataDir" ]]; then
    echo
    echo "dataDir not specified"
    echo "Exiting the script";
    echo
    exit 1

 elif [[ "$dataDir" == */ ]]; then
      dataDir="${dataDir%/}"
fi 

if [[ -z "$chimeraGenomeDir" ]]; then
    echo
    echo "chimeraGenomeDir not specified"
    echo "Exiting the script";
    echo
    exit 1

 elif [[ "$chimeraGenomeDir" == */ ]]; then
      chimeraGenomeDir="${chimeraGenomeDir%/}"
fi 


if [[ -z "$sample" ]]; then
    echo
    echo "sample not specified"
    echo "Exiting the script";
    echo
    exit 1

fi 

## Set up dirs------------------------------------------------------------------------------------------------------------------------------
SCRIPTS_DIR="$(dirname "$0")" 
SCRIPT_ID='align-to-chimera'
DATA_DIR="$dataDir"

SCRIPT_OUT_DIR="$outDir/$SCRIPT_ID"
OUT_DIR_NAME="$(basename ${outDir})"

SAMPLE="$sample"
CHIMERAGENOME_DIR="$chimeraGenomeDir"
VASTSCRATCH_DIR="/vast/scratch/users/$USER/$OUT_DIR_NAME/$SCRIPT_ID"

## all directories on vast/scratch
LOG_TMPDIR="${VASTSCRATCH_DIR}/logs"
OUT_TMPDIR_BAM="${VASTSCRATCH_DIR}/bam"
OUT_TMPDIR_BED="${VASTSCRATCH_DIR}/bed"
OUT_TMPDIR_TABLES="${VASTSCRATCH_DIR}/tables"


## all directories on stornext
OUT_DIR_BAM="${SCRIPT_OUT_DIR}/bam"
OUT_DIR_BW="${SCRIPT_OUT_DIR}/bigwig"
OUT_DIR_BED="${SCRIPT_OUT_DIR}/bed"
OUT_DIR_TABLES="${SCRIPT_OUT_DIR}/tables"
LOGS_DIR="${SCRIPT_OUT_DIR}/logs"

## Check if directories exist and if not create them
if [ ! -d "$VASTSCRATCH_DIR" ]; then
  mkdir -p  "$VASTSCRATCH_DIR"
fi

if [ ! -d "$OUT_TMPDIR_BAM" ]; then
  mkdir -p  "$OUT_TMPDIR_BAM"
fi

if [ ! -d "$OUT_TMPDIR_BED" ]; then
  mkdir -p  "$OUT_TMPDIR_BED" 
fi

if [ ! -d "$OUT_TMPDIR_TABLES" ]; then
  mkdir -p  "$OUT_TMPDIR_TABLES" 
fi

if [ ! -d "$LOG_TMPDIR" ]; then
  mkdir -p  "$LOG_TMPDIR" 
fi


if [ ! -d "$OUT_DIR_BAM" ]; then
  mkdir -p  "$OUT_DIR_BAM" 
fi

if [ ! -d "$OUT_DIR_BW" ]; then
  mkdir -p  "$OUT_DIR_BW" 
fi

if [ ! -d "$OUT_DIR_BED" ]; then
  mkdir -p  "$OUT_DIR_BED" 
fi

if [ ! -d "$OUT_DIR_TABLES" ]; then
  mkdir -p  "$OUT_DIR_TABLES" 
fi

if [ ! -d "$LOGS_DIR" ]; then
  mkdir -p  "$LOGS_DIR" 
fi

## split chimera genome filename into spike genome and genome of interest
CHIMERAGENOME="$(basename ${CHIMERAGENOME_DIR})"
SPIKEGENOME="$(basename ${CHIMERAGENOME%-*})"
GENOMEOFINTEREST="$(basename ${CHIMERAGENOME#*-})"

##------------------------------------------------------------------------------------------------------------------------------------

echo
echo "Processing $SAMPLE"
echo

##------------------------------------------------------------------------------------------------------------------------------------

echo
echo "Aligning fastq files against $CHIMERAGENOME and keeping only uniquely mappable reads"
echo

bowtie2 -p 100 -q --sensitive --no-mixed --no-discordant --dovetail --maxins 1000 --mm -x $CHIMERAGENOME_DIR/$CHIMERAGENOME -1 ${DATA_DIR}/${SAMPLE}_R1.fastq.gz -2 ${DATA_DIR}/${SAMPLE}_R2.fastq.gz  2> ${LOG_TMPDIR}/${SAMPLE}-bowtie2-alignment-results.txt | grep -v XS: - | samtools view -bhS -F4 - > ${OUT_TMPDIR_BAM}/${SAMPLE}-uniqMap.bam

##------------------------------------------------------------------------------------------------------------------------------------

echo
echo "Parsing Bowtie2 log file containing the alignment summary statistics"
echo

Rscript ${SCRIPTS_DIR}/parse-bowtie2-alignment-summary.R ${LOG_TMPDIR}/${SAMPLE}-bowtie2-alignment-results.txt $LOGS_DIR

# ##------------------------------------------------------------------------------------------------------------------------------------

echo
echo "Sorting and removing duplicated reads"
echo

## first sort bams by name as you need to run fixmate to flag unpaired reads
samtools sort -n ${OUT_TMPDIR_BAM}/${SAMPLE}-uniqMap.bam -o ${OUT_TMPDIR_BAM}/${SAMPLE}-uniqMap-sortName.bam  
samtools fixmate -m ${OUT_TMPDIR_BAM}/${SAMPLE}-uniqMap-sortName.bam ${OUT_TMPDIR_BAM}/${SAMPLE}-uniqMap-sortName-fixmate.bam 

## now re-sort bams but this time by coordinates as you need to identify and remove duplicates
samtools sort ${OUT_TMPDIR_BAM}/${SAMPLE}-uniqMap-sortName-fixmate.bam -o ${OUT_TMPDIR_BAM}/${SAMPLE}-uniqMap-sortPos-fixmate.bam 

## here i am using markdup rather than rmdup from samtools as this latter seems to be depracated
samtools markdup -r ${OUT_TMPDIR_BAM}/${SAMPLE}-uniqMap-sortPos-fixmate.bam  ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortPos-fixmate-dedup.bam 

# ##------------------------------------------------------------------------------------------------------------------------------------

echo
echo "Creating a fragment bed file from the uniquely mapped and deduplicated reads"
echo

# for this you need to re-sort (again) the bam by name rather than by coordinates
samtools sort -n ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortPos-fixmate-dedup.bam -o ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortName-fixmate-dedup.bam 
bedtools bamtobed -i ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortName-fixmate-dedup.bam -bedpe > ${OUT_TMPDIR_BED}/${SAMPLE}-reads-uniqMap-sortName-fixmate-dedup.bed

# This command takes the 1st, 2nd and 6th column of the bedpe file (respectively containing the chr name, 5' min start and 3' max end of the 4 reads) and creates a fragment file with the resulting coordinates
cut -f 1,2,6,7 ${OUT_TMPDIR_BED}/${SAMPLE}-reads-uniqMap-sortName-fixmate-dedup.bed | sort -k1,1 -k2,2n -k3,3n > ${OUT_TMPDIR_BED}/${SAMPLE}-fragments-uniqMap-dedup.bed 

# ##------------------------------------------------------------------------------------------------------------------------------------

echo
echo "Converting the fragments bed file to a fragments bam file"
echo

bedToBam -i ${OUT_TMPDIR_BED}/${SAMPLE}-fragments-uniqMap-dedup.bed  -g $CHIMERAGENOME_DIR/$CHIMERAGENOME.chrom.sizes.txt > ${OUT_TMPDIR_BAM}/${SAMPLE}-fragments-uniqMap-dedup.bam

# ##------------------------------------------------------------------------------------------------------------------------------------

echo
echo "Extracting and counting fragments that uniquely align to the $SPIKEGENOME genome"
echo

samtools view -h ${OUT_TMPDIR_BAM}/${SAMPLE}-fragments-uniqMap-dedup.bam | grep $SPIKEGENOME | sed -r s/$SPIKEGENOME-//g | samtools view -b - > ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-dedup-${SPIKEGENOME}.bam

fragmentsMappedSpikedGenome="$(samtools view -c ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-dedup-${SPIKEGENOME}.bam)"

##------------------------------------------------------------------------------------------------------------------------------------

echo
echo "Calculating the library scaling factor as 10,000/(number of fragments that uniquely map to $SPIKEGENOME)"
echo

scalingFactor="$(echo "$fragmentsMappedSpikedGenome" | awk '{{printf "%f", 10000/$1}}')"

##------------------------------------------------------------------------------------------------------------------------------------

echo
echo "Extracting and counting fragments that uniquely align to the $GENOMEOFINTEREST genome"
echo

samtools view -h ${OUT_TMPDIR_BAM}/${SAMPLE}-fragments-uniqMap-dedup.bam | grep $GENOMEOFINTEREST | sed -r s/$GENOMEOFINTEREST-//g  | samtools view -b - > ${OUT_TMPDIR_BAM}/${SAMPLE}-fragments-uniqMap-dedup-${GENOMEOFINTEREST}.bam
samtools sort ${OUT_TMPDIR_BAM}/${SAMPLE}-fragments-uniqMap-dedup-${GENOMEOFINTEREST}.bam -o ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-dedup-sortPos-${GENOMEOFINTEREST}.bam ## sort bam by position before indexing and converting it to bed
samtools index ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-dedup-sortPos-${GENOMEOFINTEREST}.bam  ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-dedup-sortPos-${GENOMEOFINTEREST}.bam.bai

## Also save the fragment file as a bed file for downstream analysis
bedtools bamtobed -i ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-dedup-sortPos-${GENOMEOFINTEREST}.bam > ${OUT_DIR_BED}/${SAMPLE}-fragments-uniqMap-dedup-sortPos-${GENOMEOFINTEREST}.bed 

fragmentsMappedGenomeOfInterest="$(samtools view -c ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-dedup-sortPos-${GENOMEOFINTEREST}.bam)"

##------------------------------------------------------------------------------------------------------------------------------------

echo
echo "Calculating the effective library size for the fragments uniquely mapped to $GENOMEOFINTEREST"
echo

calc() { awk "BEGIN{ printf \"%.2f\n\", $* }"; }

normLibSizeGOI=$(calc  $fragmentsMappedGenomeOfInterest*$scalingFactor)

##------------------------------------------------------------------------------------------------------------------------------------

echo
echo "Creating a calibrated genome coverage bedGraph file for the fragments that uniquely mapped to $GENOMEOFINTEREST"
echo

genomeCoverageBed \
-scale $scalingFactor \
-bga \
-ibam ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-dedup-sortPos-${GENOMEOFINTEREST}.bam \
| sort -k1,1 -k2,2n | grep -v "$SPIKEGENOME" > ${OUT_DIR_BED}/${SAMPLE}-fragments-uniqMap-dedup-${GENOMEOFINTEREST}-calibratedGenCov.bg

##------------------------------------------------------------------------------------------------------------------------------------

echo
echo "Creating a bigWig file from the correponding bedGraph"
echo

bedGraphToBigWig ${OUT_DIR_BED}/${SAMPLE}-fragments-uniqMap-dedup-${GENOMEOFINTEREST}-calibratedGenCov.bg ${CHIMERAGENOME_DIR}/${GENOMEOFINTEREST}.chrom.sizes.txt ${OUT_DIR_BW}/${SAMPLE}-fragments-uniqMap-dedup-${GENOMEOFINTEREST}-calibratedGenCov.bw

##------------------------------------------------------------------------------------------------------------------------------------

echo
echo "Creating a table containing the summary statistics"
echo

preDupReads="$(samtools view -c ${OUT_TMPDIR_BAM}/${SAMPLE}-uniqMap-sortPos-fixmate.bam)"
postDupReads="$(samtools view -c ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortPos-fixmate-dedup.bam)"
percentPCRDuplicates=$(calc 1 - $postDupReads / $preDupReads)

printf "%s\t%s\t%s\t%s\t%s\t%s\n" "${postDupReads}" "${percentPCRDuplicates}" "${fragmentsMappedGenomeOfInterest}" "${fragmentsMappedSpikedGenome}" "${scalingFactor}" "${normLibSizeGOI}" > "${OUT_TMPDIR_TABLES}/${SAMPLE}-samtools-summary.txt"
sed -i $'1 i\\\npostDuplicateReads\tpercentPCRDuplicatedReads\tuniqFragmentsMappedGenomeOfInterest\tuniqFragmentsMappedSpikedGenome\tscalingFactor\tnormLibSizeGenomeOfInterest' "${OUT_TMPDIR_TABLES}/${SAMPLE}-samtools-summary.txt"

paste ${LOGS_DIR}/${SAMPLE}-bowtie2-alignment-summary.txt "${OUT_TMPDIR_TABLES}/${SAMPLE}-samtools-summary.txt" > "${OUT_TMPDIR_TABLES}/${SAMPLE}-summary.txt" 
mv "${OUT_TMPDIR_TABLES}/${SAMPLE}-summary.txt" "${OUT_DIR_TABLES}/${SAMPLE}-summary.txt"

##------------------------------------------------------------------------------------------------------------------------------------

echo
echo "Done with processing $SAMPLE "
echo
echo "The table containing the summary stats can be found at $OUT_DIR_TABLES"
echo
echo "The fragment bam file and its index can be found at $OUT_DIR_BAM"
echo
echo "The fragment bed can be found at $OUT_DIR_BED"
echo
echo "The fragment bedgraph file containing the calibrated genome coverage can be found at $OUT_DIR_BED"
echo
echo "The fragment bigwig file containing the calibrated genome coverage can be found at $OUT_DIR_BW" 
echo
echo "All intermediate bam files including those containing the reads aligned to the $CHIMERAGENOME or the $SPIKEGENOME can be found at $OUT_TMPDIR_BAM"
echo
echo "The intermediate bed file containing the read pairs from which fragments were determined can be found at $OUT_TMPDIR_BED"
echo


