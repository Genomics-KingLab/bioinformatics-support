#!/bin/bash

## Author: Hamish King and Davide Vespasiani
## email: king.h@wehi.edu.au and vespasiani.d@wehi.edu.au
## Description: Script to align and process genomic sequencing paired-end data (fastq files)
## This script will:
## 1) align PE reads to the specified chimera genome 
## 2) retain only the uniquely mappable reads
## 3) remove duplicate reads
## 4) create fragment files (bed and bam format) for each read pair; 
## 5) calculate the number of deduplicated reads uniquely mapping to each of the 2 original genomes (spike-in genome and genome of interest)
## 6) use the number of reads mapping to the spike-in genome to calculate the scaling factor 
## 7) normalise the library size for the fragments mapping to the genome of interest with the scaling factor
## 8) calculate the genome coverage for each fragment mapping to the genome of interest

##  Define the help function-------------------------------------------------------------------------------------------------------------------------------
helpFunction()
{
    echo
    echo "Run this script as:  "$(basename $0)" -o <outDir> -d <dataDir> -g <chimeraGenomeDir>  -k <keepDuplicates> -m <metadataFile> -h <helpFunction> "
    echo " -o = full path to the out directory where all final files and subdirectories will be saved"
    echo " -m = full path to the tab-separated metadata.txt file containing the sample information. The first 3 fields of this file should be: 1) sample name; 2) file name for forward read (R1) and 3) file name for reverse read (R2). File must not have header"
    echo " -d = full path to the data directory containing your fastq files. Fastq files for the paired reads should be named the same as field 2 and field 3 of the metadata file"
    echo " -g = full path to the directory containing all files (ie, bowtie2 index, chromosome.sizes.txt) for the chimera genome previously generated by the create-chimera-genome.sh script. NB: file naming for the chimera genome should be <spikeGenome-genomeOfInterest>, eg ecoliASM584v2-hg38"
    echo " -k = yes/no depending on whether you want or not to keep duplicated reads"
    echo " -h = to print this help function"
    echo
    exit 1 # Exit script after printing help
}

# Get the command line arguments
while getopts ":o:d:g:k:m:h" flag; do
    case "${flag}" in
        h) helpFunction ;;
        o) outDir="${OPTARG}" ;; 
        d) dataDir="${OPTARG}" ;; 
        g) chimeraGenomeDir="${OPTARG}" ;;
        k) keepDuplicates="${OPTARG}" ;;
        m) metadataFile="${OPTARG}" ;;
        \?) echo "Invalid option: ${OPTARG}" >&2; exit 1 ;;
    esac
done

## check if flags have been specified and if any of outdir/datadir or chimera genome dir ends with / and if so remove the forward slash

if [[ -z $outDir ]]; then
    echo
    echo "outDir not specified"
    echo "Exiting the script";
    echo
    exit 1

 elif [[ $outDir == */ ]]; then
      outDir="${outDir%/}"
fi 

if [[ -z $dataDir ]]; then
    echo
    echo "dataDir not specified"
    echo "Exiting the script";
    echo
    exit 1

 elif [[ $dataDir == */ ]]; then
      dataDir="${dataDir%/}"
fi 

if [[ -z $chimeraGenomeDir ]]; then
    echo
    echo "chimeraGenomeDir not specified"
    echo "Exiting the script";
    echo
    exit 1

 elif [[ $chimeraGenomeDir == */ ]]; then
      chimeraGenomeDir="${chimeraGenomeDir%/}"
fi 


if [[ -z $keepDuplicates ]]; then
    echo
    echo "keepDuplicates not specified"
    echo "Exiting the script";
    echo
    exit 1

fi 

if [[ -z $metadataFile ]]; then
    echo
    echo "metadataFile not specified"
    echo "Exiting the script";
    echo
    exit 1

fi 


## Set up dirs------------------------------------------------------------------------------------------------------------------------------

SCRIPTS_DIR="$(dirname "$0")" 
OUT_DIR_NAME="$(basename $outDir)"
CHIMERAGENOME_DIR="$chimeraGenomeDir"
VASTSCRATCH_DIR="/vast/scratch/users/$USER/$OUT_DIR_NAME"

## all directories on vast/scratch
LOG_TMPDIR="${VASTSCRATCH_DIR}/logs"
OUT_TMPDIR_BAM="${VASTSCRATCH_DIR}/bam"
OUT_TMPDIR_BED="${VASTSCRATCH_DIR}/bed"
OUT_TMPDIR_TABLES="${VASTSCRATCH_DIR}/tables"

## all directories on stornext
OUT_DIR_BAM="${outDir}/bam"
OUT_DIR_BW="${outDir}/bigwig"
OUT_DIR_BED="${outDir}/bed"
OUT_DIR_TABLES="${outDir}/tables"
LOGS_DIR="${outDir}/logs"

## Check if directories exist and if not create them
if [ ! -d $VASTSCRATCH_DIR ]; then
  mkdir -p  $VASTSCRATCH_DIR
fi

if [ ! -d $OUT_TMPDIR_BAM ]; then
  mkdir -p  $OUT_TMPDIR_BAM
fi

if [ ! -d $OUT_TMPDIR_BED ]; then
  mkdir -p  $OUT_TMPDIR_BED 
fi

if [ ! -d $OUT_TMPDIR_TABLES ]; then
  mkdir -p  $OUT_TMPDIR_TABLES
fi

if [ ! -d $LOG_TMPDIR ]; then
  mkdir -p  $LOG_TMPDIR
fi


if [ ! -d $OUT_DIR_BAM ]; then
  mkdir -p  $OUT_DIR_BAM 
fi

if [ ! -d $OUT_DIR_BW ]; then
  mkdir -p  $OUT_DIR_BW
fi

if [ ! -d $OUT_DIR_BED ]; then
  mkdir -p  $OUT_DIR_BED 
fi

if [ ! -d $OUT_DIR_TABLES ]; then
  mkdir -p $OUT_DIR_TABLES
fi

if [ ! -d $LOGS_DIR ]; then
  mkdir -p  $LOGS_DIR 
fi

## split chimera genome filename into spike genome and genome of interest
CHIMERAGENOME="$(basename ${CHIMERAGENOME_DIR})"
SPIKEGENOME="$(basename ${CHIMERAGENOME%-*})"
GENOMEOFINTEREST="$(basename ${CHIMERAGENOME#*-})"


## Functions ----------------------------------------------------------------------------------------------------------

## function to join variables and separated them by IFS (eg, ',' ':' ...whatever)
join_arr() {
  local IFS="$1"
  shift
  echo "$*"
}

## function to perform math operations with variables
calc() { 
  awk "BEGIN{ printf \"%.2f\n\", $* }"; 
}


## Print a recap of what the script will actually do based on the user-defined flags ------------------------------------------------------------------------------

echo
echo "Running the script with the following options:"
echo " -m = $metadataFile --> 3 columns tab-separated metadata file (no header) containing info on fastq files"
echo " -d = $dataDir  --> directory containing input fastq files"
echo " -o = $outDir  --> directory where all output files will be saved"
echo " -g = $CHIMERAGENOME_DIR --> directory containing index and chrom.sizes for the $CHIMERAGENOME chimera genome"
echo " -k = $keepDuplicates --> option selected regarding whether or not to keep PCR duplicated reads" 
echo

## Starting the actual script -----------------------------------------------------------------------------------------------------------------------------------

while IFS= read -r line; do

  SAMPLE=$(echo "${line}" | cut -f1)

  echo
  echo "Processing $SAMPLE"
  echo

  R1=$(echo "${line}" | cut -f2)
  R2=$(echo "${line}" | cut -f3)


  ## in case of multiple comma-separated R1 and R2 files present in the $2 and $3 field of the metadata file
  ## these lines below are used to add the data directory full path to each file and combine all the resulting paths into a single line that can be read as input by bowtie2 

  if [[ $R1 =~ "," ]]; then
    IFS=',' read -ra fastqArr <<< $R1
    fastqArr=( "${fastqArr[@]/#/$dataDir/}" )
    R1="$(join_arr , "${fastqArr[@]}")"

  else
    R1="$dataDir/$R1"
  fi


  if [[ $R2 =~ "," ]]; then
    IFS=',' read -ra fastqArr <<< $R2
    fastqArr=( "${fastqArr[@]/#/$dataDir/}" )
    R2="$(join_arr , "${fastqArr[@]}")"
  else
    R2="$dataDir/$R2"
  fi

  ##------------------------------------------------------------------------------------------------------------------------------------

  echo
  echo "Aligning $R1 and $R2 fastq files against $CHIMERAGENOME and keeping only uniquely mappable reads"
  echo

  bowtie2 -p 100 -q --sensitive --no-mixed --no-discordant --dovetail --maxins 1000 --mm -x $CHIMERAGENOME_DIR/$CHIMERAGENOME -1 $R1 -2 $R2  2> ${LOG_TMPDIR}/${SAMPLE}-bowtie2-alignment-results.txt | grep -v XS: - | samtools view -bhS -F4 - > ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap.bam

  ##------------------------------------------------------------------------------------------------------------------------------------
  
  echo
  echo "Parsing Bowtie2 log file containing the alignment summary statistics"
  echo

  Rscript ${SCRIPTS_DIR}/parse-bowtie2-alignment-summary.R ${LOG_TMPDIR}/${SAMPLE}-bowtie2-alignment-results.txt $LOGS_DIR

  ##------------------------------------------------------------------------------------------------------------------------------------

  echo
  echo "Sorting reads"
  echo

  ## first sort bams by name as you need to run fixmate to flag unpaired reads
  samtools sort -n ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap.bam -o ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortName.bam  
  samtools fixmate -m ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortName.bam ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortName-fixmate.bam 

  ## now re-sort bams but this time by coordinates in case you need to identify and remove duplicates
  samtools sort ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortName-fixmate.bam -o ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortPos-fixmate.bam 

  if [ $keepDuplicates == "yes" ]; then
      echo
      echo "Keeping the duplicated reads"
      echo

      samtools sort -n ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortPos-fixmate.bam -o ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortName-fixmate-final.bam 

  else
      echo
      echo "Removing duplicated reads with samtools markdup"
      echo

      samtools markdup -r ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortPos-fixmate.bam  ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortPos-fixmate-dedup.bam 
      samtools sort -n ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortPos-fixmate-dedup.bam -o ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortName-fixmate-final.bam 

  fi 

  #------------------------------------------------------------------------------------------------------------------------------------

  echo
  echo "Creating a fragment bed file from the uniquely mapped and deduplicated reads"
  echo

  bedtools bamtobed -i ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortName-fixmate-final.bam -bedpe > ${OUT_TMPDIR_BED}/${SAMPLE}-reads-uniqMap-sortName-fixmate-final.bed

  # This command takes the 1st, 2nd and 6th column of the bedpe file (respectively containing the chr name, 5' min start and 3' max end of the 4 reads) and creates a fragment file with the resulting coordinates
  cut -f 1,2,6,7 ${OUT_TMPDIR_BED}/${SAMPLE}-reads-uniqMap-sortName-fixmate-final.bed | sort -k1,1 -k2,2n -k3,3n > ${OUT_TMPDIR_BED}/${SAMPLE}-fragments-uniqMap.bed 

  ##------------------------------------------------------------------------------------------------------------------------------------

  echo
  echo "Converting the fragments bed file to a fragments bam file"
  echo

  bedToBam -i ${OUT_TMPDIR_BED}/${SAMPLE}-fragments-uniqMap.bed  -g $CHIMERAGENOME_DIR/$CHIMERAGENOME.chrom.sizes.txt > ${OUT_TMPDIR_BAM}/${SAMPLE}-fragments-uniqMap.bam

  # ##------------------------------------------------------------------------------------------------------------------------------------

  echo
  echo "Extracting and counting fragments that uniquely align to the $SPIKEGENOME genome"
  echo

  samtools view -h ${OUT_TMPDIR_BAM}/${SAMPLE}-fragments-uniqMap.bam | grep $SPIKEGENOME | sed -r s/$SPIKEGENOME-//g | samtools view -b - > ${OUT_TMPDIR_BAM}/${SAMPLE}-fragments-uniqMap-${SPIKEGENOME}.bam
  samtools sort ${OUT_TMPDIR_BAM}/${SAMPLE}-fragments-uniqMap-${SPIKEGENOME}.bam -o ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-${SPIKEGENOME}.bam
  samtools index ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-${SPIKEGENOME}.bam  ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-${SPIKEGENOME}.bam.bai
  bedtools bamtobed -i ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-${SPIKEGENOME}.bam > ${OUT_DIR_BED}/${SAMPLE}-fragments-uniqMap-${SPIKEGENOME}.bed ## save the fragment file as a bed file for downstream analysis
  fragmentsMappedSpikedGenome="$(samtools view -c ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-${SPIKEGENOME}.bam)"

  ##------------------------------------------------------------------------------------------------------------------------------------

  echo
  echo "Calculating the library scaling factor as 10,000/(number of fragments that uniquely map to $SPIKEGENOME)"
  echo

  scalingFactor="$(echo "$fragmentsMappedSpikedGenome" | awk '{{printf "%f", 10000/$1}}')"

  ##------------------------------------------------------------------------------------------------------------------------------------

  echo
  echo "Extracting and counting fragments that uniquely align to the $GENOMEOFINTEREST genome"
  echo

  samtools view -h ${OUT_TMPDIR_BAM}/${SAMPLE}-fragments-uniqMap.bam | grep $GENOMEOFINTEREST | sed -r s/$GENOMEOFINTEREST-//g  | samtools view -b - > ${OUT_TMPDIR_BAM}/${SAMPLE}-fragments-uniqMap-${GENOMEOFINTEREST}.bam
  samtools sort ${OUT_TMPDIR_BAM}/${SAMPLE}-fragments-uniqMap-${GENOMEOFINTEREST}.bam -o ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-${GENOMEOFINTEREST}.bam 
  samtools index ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-${GENOMEOFINTEREST}.bam  ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-${GENOMEOFINTEREST}.bam.bai
  bedtools bamtobed -i ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-${GENOMEOFINTEREST}.bam > ${OUT_DIR_BED}/${SAMPLE}-fragments-uniqMap-${GENOMEOFINTEREST}.bed ## save the fragment file as a bed file for downstream analysis
  
  fragmentsMappedGenomeOfInterest="$(samtools view -c ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-${GENOMEOFINTEREST}.bam)"

  ##------------------------------------------------------------------------------------------------------------------------------------

  echo
  echo "Calculating the effective library size for the fragments uniquely mapped to $GENOMEOFINTEREST"
  echo

  normLibSizeGOI=$(calc  $fragmentsMappedGenomeOfInterest*$scalingFactor)

  ##------------------------------------------------------------------------------------------------------------------------------------

  echo
  echo "Creating a calibrated genome coverage bedGraph file for the fragments that uniquely mapped to $GENOMEOFINTEREST"
  echo

  genomeCoverageBed -scale $scalingFactor -bga -ibam ${OUT_DIR_BAM}/${SAMPLE}-fragments-uniqMap-${GENOMEOFINTEREST}.bam | sort -k1,1 -k2,2n | grep -v "$SPIKEGENOME" > ${OUT_DIR_BED}/${SAMPLE}-fragments-calibratedGenCov-${GENOMEOFINTEREST}.bg

  ##------------------------------------------------------------------------------------------------------------------------------------

  echo
  echo "Creating a bigWig file from the correponding bedGraph"
  echo

  bedGraphToBigWig ${OUT_DIR_BED}/${SAMPLE}-fragments-calibratedGenCov-${GENOMEOFINTEREST}.bg ${CHIMERAGENOME_DIR}/${GENOMEOFINTEREST}.chrom.sizes.txt ${OUT_DIR_BW}/${SAMPLE}-fragments-calibratedGenCov-${GENOMEOFINTEREST}.bw

  ##------------------------------------------------------------------------------------------------------------------------------------

  echo
  echo "Creating a table containing the summary statistics"
  echo


  preDeDupReads="$(samtools view -c ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortPos-fixmate.bam)"

  if [ $keepDuplicates == "yes" ]; then
    
    printf "%s\t%s\t%s\t%s\t%s\n" "${preDeDupReads}" "${fragmentsMappedGenomeOfInterest}" "${fragmentsMappedSpikedGenome}" "${scalingFactor}" "${normLibSizeGOI}" > ${OUT_TMPDIR_TABLES}/${SAMPLE}-samtools-summary.txt
    sed -i $'1 i\\\nfinalReadsWithDup\tfragmentsUniqMappedGenomeOfInterest\tfragmentsUniqMappedSpikedGenome\tscalingFactor\tnormLibSizeGenomeOfInterest' ${OUT_TMPDIR_TABLES}/${SAMPLE}-samtools-summary.txt

  else
  
    postDeDupReads="$(samtools view -c ${OUT_TMPDIR_BAM}/${SAMPLE}-reads-uniqMap-sortPos-fixmate-dedup.bam)"
    percentPCRDup=$(calc 1 - $postDeDupReads / $preDeDupReads)

    printf "%s\t%s\t%s\t%s\t%s\t%s\n" "${postDeDupReads}" "${percentPCRDup}" "${fragmentsMappedGenomeOfInterest}" "${fragmentsMappedSpikedGenome}" "${scalingFactor}" "${normLibSizeGOI}" > ${OUT_TMPDIR_TABLES}/${SAMPLE}-samtools-summary.txt
    sed -i $'1 i\\\nfinalReadsNoDup\tpercentReadsPCRDup\tfragmentsUniqMappedGenomeOfInterest\tfragmentsUniqMappedSpikedGenome\tscalingFactor\tnormLibSizeGenomeOfInterest' ${OUT_TMPDIR_TABLES}/${SAMPLE}-samtools-summary.txt

  fi 

  paste ${LOGS_DIR}/${SAMPLE}-bowtie2-alignment-summary.txt ${OUT_TMPDIR_TABLES}/${SAMPLE}-samtools-summary.txt > ${OUT_TMPDIR_TABLES}/${SAMPLE}-summary.txt
  mv ${OUT_TMPDIR_TABLES}/${SAMPLE}-summary.txt ${OUT_DIR_TABLES}/${SAMPLE}-summary.txt


  ## Printing location final results ------------------------------------------------------------------------------------------------------------------------------------

  echo
  echo "Done with processing $SAMPLE "
  echo


done  < $metadataFile

echo
echo "All final files can be found at $outDir"
echo
echo "All intermediate files can instead be found at $VASTSCRATCH_DIR"
echo
